#BlueJ class context
comment0.target=MiniPaint
comment0.text=\r\n\ A\ simple\ drawing\ program.\r\n\ The\ user\ can\ select\ from\ a\ variety\ of\ tools\ and\ options\ using\ the\ buttons\ and\r\n\ \ \ elements\ down\ the\ left\ side,\ and\ can\ use\ the\ mouse\ to\ add\ elements\ to\ the\ drawing\r\n\ \ \ according\ to\ the\ current\ tool\ and\ options\r\n\ Note,\ most\ of\ the\ "action"\ in\ the\ program\ happens\ in\ response\ to\ mouse\ events;\r\n\ \ \ the\ buttons,\ textFields,\ and\ sliders\ mostly\ record\ information\ that\ is\ used\r\n\ \ \ later\ by\ the\ mouse\ responding.\r\n
comment1.params=
comment1.target=void\ clear()
comment1.text=This\ function\ is\ an\ improvement\ on\ UI.clearGraphics()\ where\ it\ can\ keep\ the\ current\ MiniPaint\ Settings\r\n
comment10.params=x\ y\ radius
comment10.target=void\ drawAFlower(double,\ double,\ double)
comment10.text=\ [Completion]\r\n\ Draws\ a\ simple\ flower\ with\ 6\ petals,\ centered\ at\ (x,y)\ with\ the\ given\ radius\r\n
comment11.params=endx\ startx\ endy\ starty
comment11.target=void\ drawRect(double,\ double,\ double,\ double)
comment11.text=This\ is\ the\ function\ that\ draws\ the\ rectangle\ based\ on\ startx,\ endx,\ starty,\ endy\ positions
comment12.params=endx\ startx\ endy\ starty
comment12.target=void\ drawOval(double,\ double,\ double,\ double)
comment12.text=This\ is\ the\ function\ that\ draws\ the\ Oval\ based\ on\ startx,\ endx,\ starty,\ endy\ positions
comment13.params=endx\ startx\ endy\ starty
comment13.target=void\ fillRect(double,\ double,\ double,\ double)
comment13.text=This\ is\ the\ function\ that\ fills\ the\ rectangle\ and\ draws\ the\ outline\ based\ on\ startx,\ endx,\ starty,\ endy\ positions
comment14.params=endx\ startx\ endy\ starty
comment14.target=void\ fillOval(double,\ double,\ double,\ double)
comment14.text=This\ is\ the\ function\ that\ fills\ the\ oval\ and\ draws\ the\ outline\ based\ on\ startx,\ endx,\ starty,\ endy\ positions
comment15.params=endx\ startx\ endy\ starty\ min_width\ min_height
comment15.target=void\ drawImage(double,\ double,\ double,\ double,\ double,\ double)
comment15.text=This\ is\ the\ function\ that\ draws\ the\ Image\ based\ on\ startx,\ endx,\ starty,\ endy\ positions
comment16.params=x1\ y1\ x2\ y2
comment16.target=void\ drawARectangle(double,\ double,\ double,\ double)
comment16.text=\r\n\ Draw\ a\ rectangle\ between\ the\ two\ diagonal\ corners\r\n\ [Completion]\ Works\ out\ the\ left,\ top,\ width,\ and\ height\ \r\n\ Then\ draws\ the\ rectangle,\ based\ on\ the\ options\r\n
comment17.params=x1\ y1\ x2\ y2
comment17.target=void\ drawAnOval(double,\ double,\ double,\ double)
comment17.text=\r\n\ Draw\ an\ oval\ to\ fit\ the\ rectangle\ between\ the\ the\ two\ diagonal\ corners\r\n\ [Completion]\ Works\ out\ the\ left,\ top,\ width,\ and\ height\ \r\n\ Then\ draws\ the\ oval,\ based\ on\ the\ options\r\n
comment18.params=x\ y
comment18.target=void\ drawACaption(double,\ double)
comment18.text=\ \r\n\ Draws\ the\ current\ caption\ at\ the\ mouse\ released\ point.\r\n
comment19.params=x1\ y1\ x2\ y2
comment19.target=void\ drawAnImage(double,\ double,\ double,\ double)
comment19.text=\ [Completion]\r\n\ Draws\ the\ current\ image\ between\ the\ two\ diagonal\ corners,\ unless\r\n\ \ they\ are\ very\ close,\ and\ then\ just\ draws\ the\ image\ at\ its\ natural\ size\r\n\ \ Works\ out\ the\ left,\ top,\ width,\ and\ height\ \r\n\ Then\ draws\ the\ image,\ if\ there\ is\ one.\r\n
comment2.params=
comment2.target=void\ setupGUI()
comment2.text=\r\n\ Set\ up\ the\ interface\:\ buttons,\ textfields,\ sliders,\r\n\ listening\ to\ the\ mouse\r\n
comment20.params=arguments
comment20.target=void\ main(java.lang.String[])
comment3.params=str
comment3.target=void\ setTool(java.lang.String)
comment3.text=\r\n\ This\ function\ saves\ up\ a\ lot\ of\ space\ and\ essentially\ just\ sets\ the\ tool\ by\ the\ parameter\ that\ we\ passed\ to\ it.\ e.g\ "Rectangle"\r\n
comment4.params=text
comment4.target=void\ doCaption(java.lang.String)
comment4.text=Responds\ whenever\ it\ notices\ a\ change\ in\ the\ Caption\ Field\ (either\ length\ or\ when\ enter\ key\ is\ pressed)
comment5.params=
comment5.target=void\ doImage()
comment5.text=Respond\ to\ the\ Image\ Button\ -\ opens\ the\ file\ chooser
comment6.params=
comment6.target=void\ setLineColor()
comment6.text=Respond\ to\ the\ Line\ Color\ button,\ opens\ the\ color\ chooser
comment7.params=
comment7.target=void\ setFillColor()
comment7.text=Respond\ to\ the\ Fill\ Color\ button,\ opens\ the\ color\ chooser
comment8.params=action\ x\ y
comment8.target=void\ doMouse(java.lang.String,\ double,\ double)
comment8.text=\r\n\ Respond\ to\ mouse\ events\r\n\ When\ pressed,\ remember\ the\ position.\r\n\ When\ released,\ draw\ what\ is\ specified\ by\ current\ tool\r\n\ Uses\ the\ value\ stored\ in\ the\ field\ to\ determine\ which\ kind\ of\ tool\ to\ draw.\r\n\ \ It\ should\ call\ the\ drawALine,\ drawARectangle,\ drawAnOval,\ etc,\ methods\r\n\ \ passing\ the\ pressed\ and\ released\ positions\r\n\ [Completion]\ should\ respond\ to\ "dragged"\ events\ also\ to\ do\ erasing\r\n
comment9.params=x1\ y1\ x2\ y2
comment9.target=void\ drawALine(double,\ double,\ double,\ double)
comment9.text=\r\n\ Draw\ a\ line\ between\ the\ two\ positions\ (x1,\ y1)\ and\ (x2,\ y2)\r\n
numComments=21
